package main

import (
	"bytes"
	"fmt"
	"os"
	"strings"
)

func getCCClassName() string {
	numStrings := []string{
		"One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine",
	}
	name := make([]rune, 0, len(flagProblem)*2)
	nextUc := true
	for i, v := range flagProblem {
		if i == 0 && v >= '0' && 'v' <= '9' {
			for _, nc := range numStrings[v-'0'] {
				name = append(name, nc)
			}
		} else if v == '-' {
			nextUc = true
		} else {
			if nextUc {
				name = append(name, v-32)
				nextUc = false
			} else {
				name = append(name, v)
			}
		}
	}
	return string(name)
}

func makefileCC(f *os.File, desc string, code string) error {
	var err error
	var buf bytes.Buffer

	lines := strings.Split(code, "\n")

	// #ifndef def
	defineName := strings.Replace(strings.ToUpper(flagProblem), "-", "_", -1)
	buf.WriteString("#ifndef _INC_")
	buf.WriteString(defineName)
	buf.WriteString("_\r\n")
	buf.WriteString("#define _INC_")
	buf.WriteString(defineName)
	buf.WriteString("_\r\n")

	// common include
	buf.WriteString("\r\n")
	buf.WriteString(`#include "_common_all.h"`)
	buf.WriteString("\r\n")
	buf.WriteString(`#include "_common_list.h"`)
	buf.WriteString("\r\n")
	buf.WriteString(`#include "_common_binary_tree.h"`)
	buf.WriteString("\r\n\r\n")

	// description
	buf.WriteString("/* Generated by leetgen (github.com/sryanyuan/leetgen)\r\n")
	buf.WriteString(desc)
	buf.WriteString("*/\r\n")

	// class definition
	buf.WriteString("\r\n")
	buf.WriteString("class ")
	buf.WriteString(getCCClassName())
	if flagType == "list" {
		buf.WriteString(" : public SingleLinkedListCls")
	} else if flagType == "btree" {
		buf.WriteString(" : public TreeNodeCls")
	}
	buf.WriteString(" {\r\n")
	buf.WriteString("public:\r\n")
	buf.WriteString("\tstatic void test() {\r\n\t\t\r\n\t}\r\n\r\n")
	buf.WriteString("\tstatic ")
	lineNo := -1
	for i := 0; i < len(lines)-1; i++ {
		if strings.HasPrefix(strings.TrimSpace(lines[i]), "public:") {
			lineNo = i
			continue
		}
		if lineNo >= 0 {
			line := strings.TrimSpace(lines[i])
			if i-lineNo == 1 {
				buf.WriteString(line)
				buf.WriteString("\r\n")
			} else {
				buf.WriteString("\t")
				if i-lineNo == 2 {
					buf.WriteString("\t")
				}
				buf.WriteString(line)
				if 1 != len(lines)-1 {
					buf.WriteString("\r\n")
				}
			}
		}
	}
	buf.WriteString("};\r\n\r\n")

	// #endif
	buf.WriteString("#endif\r\n")

	_, err = f.Write(buf.Bytes())
	if nil != err {
		fmt.Println("File", f.Name(), "created")
	}
	return err
}
